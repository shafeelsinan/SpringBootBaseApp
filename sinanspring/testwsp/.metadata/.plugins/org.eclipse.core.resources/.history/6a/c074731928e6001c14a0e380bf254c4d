package com.springboot.blog.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springboot.blog.domain.Post;
import com.springboot.blog.dto.PostDto;
import com.springboot.blog.exception.ResourceNotFountException;
import com.springboot.blog.repository.PostRepository;
import com.springboot.blog.service.PostService;

@Service
public class PostServiceImpl implements PostService{
	
	@Autowired
	private PostRepository postRepository;
	
	public PostRepository getPostRepository() {
		return postRepository;
	}


	public void setPostRepository(PostRepository postRepository) {
		this.postRepository = postRepository;
	}


	@Override
	public PostDto createPost(PostDto postDto)
	{
		//convert dto to entity
		Post post = dtoTOobj(postDto);
		Post newpost = postRepository.save(post);
		
		//convert entitty to dto
		PostDto postreponse = mapToDto(post);
		
		return postreponse;
	}


	@Override
	public List<PostDto> getAllPost() {
		List<Post> posts =  postRepository.findAll();
		return posts.stream().map(post -> mapToDto(post)).collect(Collectors.toList());
	}
	
	private PostDto mapToDto(Post post)
	{
		PostDto postreponse = new PostDto();
		postreponse.setId(post.getId());
		postreponse.setDescription(post.getDescription());
		postreponse.setTitle(post.getTitle());
		postreponse.setContent(post.getContent());
		return postreponse;
	}
	
	private Post dtoTOobj(PostDto postDto)
	{
		Post post = new Post();
		post.setTitle(postDto.getTitle());
		post.setDescription(postDto.getDescription());
		post.setContent(postDto.getContent());
		return post;
	}


	@Override
	public PostDto getPostById(Long id) {
		Post post = postRepository.findById(id).orElseThrow(() -> new ResourceNotFountException("post", "id", id));
		return null;
	}

}
